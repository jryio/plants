# =========================================================
# CARGO MAKE
# Documentation: https://sagiegurari.github.io/cargo-make
# =========================================================

# =========================================================
# ENV FILES
# =========================================================
# Load env files depending on our profile
# Values will be used in docker-compose.yaml
env_files = [
  { path = "./env/common.env" },
  { path = "./env/app.dev.env", profile = "development" },
  { path = "./env/app.prod.env", profile = "prod" },
  { path = "./env/db.dev.env", profile = "development" },
  { path = "./env/db.prod.env", profile = "prod" },
]

# Enable workspace support
# Documentation: https://github.com/sagiegurari/cargo-make#usage-workspace-support
[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[env.development]
MODE = "dev"

[env.prod]
MDOE = "prod"

# =========================================================
# CONFIG
# =========================================================
[config]
# Disable pre-defined cargo make tasks
skip_core_tasks = true
# Make tasks run at the workspace root instead of on all crates
default_to_workspace = false

# =========================================================
# BUILD SCRIPTS
# =========================================================
[tasks.start]
# TODO:
# - Build tailwind once
# - Start frontennd
# - Write a cleanup flow of tasks that undoes everything in "start
#   Mainly shutting down docker containers like DB and TW
category = "Build"
condition = { profiles = ["development"] }
run_task = [
  { name = [
    "start-web",
    "start-server",
  ], parallel = true },
  { name = [
    "compose-logs",
  ] },
]

# WEB
[tasks.start-web]
category = "Build"
condition = { profiles = ["development"] }
watch = { watch = ["./src/"] }
command = "trunk"
args = ["serve"]
dependencies = ["start-tw"]

[tasks.build-web]
category = "Build"
condition = { profiles = ["prod"] }
command = "trunk"
args = ["build", "--dist", "backend/static/frontend", "frontend/index.html"]

# TAILWIND
# TODO @ jacob - make this watch file changes?
[tasks.start-tw]
category = "Build"
watch = { watch = [
  "./frontend/styles/index.css",
  "./frontend/src",
], ignore_pattern = "./frontend/**/tailwind.css" }
command = "docker"
args = ["compose", "up", "tailwind"]

[tasks.build-tw]
category = "Build"
command = "docker"
args = ["compose", "up", "tailwind"]

# SERVER
[tasks.start-server]
category = "Build"
condition = { profiles = ["development"] }
watch = { watch = ["./backend"] }
command = "cargo"
args = ["run", "-p", "backend"]
dependencies = ["start-db"]

[tasks.build-server]
category = "Build"
condition = { profiles = ["prod"] }
command = "cargo"
args = ["--release", "--bin", "backend"]

# DATABASE
[tasks.start-db]
category = "Build"
command = "docker"
args = ["compose", "up", "-d", "db"]

[tasks.psql]
category = "SQL"
command = "docker"
args = ["exec", "-it", "db", "psql"]

[tasks.migrate-add]
category = "SQL"
command = "sqlx"
args = ["migrate", "add", "--source", "backend/sql/migrations", "${@}"]

[tasks.migrate-revert]
category = "SQL"
env = { "DATABASE_URL" = "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST_NAME}:${DB_PORT_HOST}/${POSTGRES_DB}" }
command = "sqlx"
args = ["migrate", "revert", "--source", "backend/sql/migrations", "${@}"]

[tasks.migrate-run]
category = "SQL"
env = { "DATABASE_URL" = "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST_NAME}:${DB_PORT_HOST}/${POSTGRES_DB}" }
command = "sqlx"
args = ["migrate", "run", "--source", "backend/sql/migrations", "${@}"]

# =========================================================
# DOCKER COMPOSE - Run with values fron `env` files
# =========================================================
[tasks.compose-build]
category = "Docker"
command = "docker"
args = ["compose", "build", "${@}"]

[tasks.compose-up]
category = "Docker"
command = "docker"
args = ["compose", "up", "${@}"]

[tasks.compose-logs]
category = "Docker"
command = "docker"
args = ["compose", "logs", "--follow", "--timestamps", "${@}"]

[tasks.compose-down]
category = "Docker"
command = "docker"
args = ["compose", "down", "${@}"]

[tasks.compose-start]
category = "Docker"
command = "docker"
args = ["compose", "start", "${@}"]

[tasks.compose-stop]
category = "Docker"
command = "docker"
args = ["compose", "stop", "${@}"]

[tasks.compose-rm]
category = "Docker"
command = "docker"
args = ["compose", "rm", "${@}"]

[tasks.compose-exec]
category = "Docker"
command = "docker"
args = ["compose", "exec", "${@}"]

[tasks.compose-ls]
category = "Docker"
command = "docker"
args = ["compose", "ls", "${@}"]

[tasks.compose-ps]
category = "Docker"
command = "docker"
args = ["compose", "ps", "${@}"]

[tasks.compose-images]
category = "Docker"
command = "docker"
args = ["compose", "images", "${@}"]

# =========================================================
# HELP
# =========================================================
[tasks.help]
category = "Help"
description = "List all tasks"
command = "cargo"
args = ["make", "--list-all-steps"]
